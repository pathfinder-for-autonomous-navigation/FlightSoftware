[platformio]
default_envs= leader
[common_env_data]
platform = teensy
board = teensy35
framework = arduino
lib_deps =
    https://github.com/nox771/i2c_t3
    https://github.com/pathfinder-for-autonomous-navigation/psim
    ../CommonSoftware/
    https://github.com/bblanchon/ArduinoJson
build_flags =
    -std=c++14
    -Wall
    -Werror
    -DLIN_RANDOM_SEED=6828031
    -DNDEBUG
src_filter = +<*>
upload_protocol = teensy-cli

; Builds full flight software for the leader spacecraft.
[env:leader]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -D PAN_LEADER
src_filter = ${common_env_data.src_filter}
upload_protocol = ${common_env_data.upload_protocol}

; Builds full flight software for the leader spacecraft.
; Also includes UMB_DEBUG to track activity
[env:leader_debug]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -D PAN_LEADER
    -D UMB_DEBUG
src_filter = ${common_env_data.src_filter}
upload_protocol = ${common_env_data.upload_protocol}

; Builds full flight software for the follower spacecraft.
[env:follower]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -DPAN_FOLLOWER
src_filter = ${common_env_data.src_filter}
upload_protocol = ${common_env_data.upload_protocol}

; All debug outputs are enabled except those associated with the i2c interface.
; This is to prevent timing and concurrency issues with printing. See `umb_test`
; for i2c interface debugging.
[env:debug]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -DMTR_DEBUG
    -DRWA_DEBUG
    -DSSA_DEBUG
    -DMAIN_DEBUG
    -DPAN_LEADER
src_filter = ${common_env_data.src_filter}
upload_protocol = ${common_env_data.upload_protocol}

; This is a custom debug enviorment to test the functionality of havt
; while running full ADCS software
[env:havt_debug]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -DHAVT_DEBUG
    -DPAN_LEADER
    -DUMB_DEBUG
src_filter = ${common_env_data.src_filter}
upload_protocol = ${common_env_data.upload_protocol}

; Reads sensor measurements from the IMU subsystem and prints filtered and raw
; measurement data to the console
[env:imu_test]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -DIMU_DEBUG
    -DPAN_LEADER
src_filter =
    +<imu.cpp>
    +<imu_calibration.cpp>
    +<../test/imu_test.cpp>
upload_protocol = ${common_env_data.upload_protocol}

; Simple test with the MMC34160PJ magnetometer
[env:MMC34160PJ_test]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags = ${common_env_data.build_flags}
src_filter = +<../test/MMC34160PJ_test.cpp>
upload_protocol = ${common_env_data.upload_protocol}

; Oscillates the magnetic moment commanded to the MTRs in more or less a
; triangle wave
[env:mtr_test]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -DMTR_DEBUG
    -DPAN_LEADER
src_filter =
    +<mtr.cpp>
    +<../test/mtr_test.cpp>
upload_protocol = ${common_env_data.upload_protocol}

; Runs the RWAs through a small stress test. A CSV file is generated in the
; console. See the MATLAB plotting function.
[env:rwa_test]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -DRWA_DEBUG
    -DPAN_LEADER
src_filter =
    +<rwa.cpp>
    +<../test/rwa_test.cpp>
upload_protocol = ${common_env_data.upload_protocol}

; Simple smoke test to ensure the Teensy is still alive
[env:smoke_test]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags = ${common_env_data.build_flags}
src_filter = +<../test/smoke_test.cpp>
upload_protocol = ${common_env_data.upload_protocol}

; Reads all of the sun sensors and outputs the readings in a CSV format.
[env:ssa_test]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -DMTR_DEBUG
    -DPAN_LEADER
src_filter =
    +<ssa.cpp>
    +<../test/ssa_test.cpp>
upload_protocol = ${common_env_data.upload_protocol}

; Boots up the slave i2c device interface only. Includes helpful debug
; statements. See src/state_controller.cpp. The i2c interface may be slow
; because of all the serial output used in the interupt functions.
[env:state_test]
platform = ${common_env_data.platform}
board = ${common_env_data.board}
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -DUMB_DEBUG
    -DPAN_LEADER
src_filter =
    +<state_controller.cpp>
    +<state.cpp>
    +<../test/state_test.cpp>
upload_protocol = ${common_env_data.upload_protocol}

; Used for ADCS Driver development.
[env:state_test_teensy32]
platform = ${common_env_data.platform}
board = teensy31
framework = ${common_env_data.framework}
lib_deps = ${common_env_data.lib_deps}
build_flags =
    ${common_env_data.build_flags}
    -DUMB_DEBUG
    -DPAN_LEADER
    -DTEENSY32
src_filter =
    +<state_controller.cpp>
    +<state.cpp>
    +<../test/state_test.cpp>
upload_protocol = ${common_env_data.upload_protocol}
