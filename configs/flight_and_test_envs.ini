#########################################################################
# Common compiler options for a Teensy target.
#########################################################################
[fsw_teensy_common]
platform = teensy
framework = arduino
lib_deps =
  CommonSoftware/
build_flags = -std=c++14 -Werror -Wall -D UNITY_INCLUDE_DOUBLE -D NDEBUG -DLIN_RANDOM_SEED=358264
  -D SERIAL4_RX_BUFFER_SIZE=1024 -O3 -fno-math-errno
build_unflags = -fsingle-precision-constant -fmath-errno
lib_extra_dirs = lib/fsw
src_filter = +<fsw/FCCode/> +<fsw/teensy.cpp> +<fsw/flow_data.cpp>
upload_protocol = teensy-cli
test_build_project_src = true
test_ignore = *

#########################################################################
# CLI Targets can be directly uploaded to a Teensy via a USB cable. 
#########################################################################
[fsw_teensy35]
extends = fsw_teensy_common
board = teensy35

[fsw_teensy36]
extends = fsw_teensy_common
board = teensy36

[fsw_teensy_hitl]
build_flags = ${fsw_teensy_common.build_flags} -D FUNCTIONAL_TEST

[env:fsw_teensy35_hitl]
extends = fsw_teensy35
build_flags = ${fsw_teensy_hitl.build_flags} -D PAN_LEADER

[env:fsw_teensy36_hitl]
extends = fsw_teensy36
build_flags = ${fsw_teensy_hitl.build_flags} -D PAN_LEADER

[env:fsw_preflight]
extends = fsw_teensy36
src_filter = ${fsw_teensy_common.src_filter} -<fsw/teensy.cpp> +<fsw/preflight_fc.cpp>
build_flags = ${fsw_teensy_common.build_flags} -D FLIGHT -D PAN_LEADER

[env:fsw_flight]
extends = fsw_teensy36
build_flags = ${fsw_teensy_common.build_flags} -D FLIGHT -D PAN_LEADER

#########################################################################
# The native desktop and Teensy CI targets are used for running software-only unit tests.
#########################################################################

[fsw_native_common]
platform = native
lib_deps =
  CommonSoftware/
lib_archive = false
lib_compat_mode = off
test_build_project_src = true
test_filter = test_fsw_*
test_ignore = test_fsw_EEPROM
build_flags = -std=c++14 -Werror -Wall -D FUNCTIONAL_TEST -D UNITY_INCLUDE_DOUBLE -D DESKTOP -lpthread -D PAN_LEADER
lib_extra_dirs = lib/fsw

; This target is used for debugging and testing purposes.
; - Can be debugged
; - Can run unit tests with it
; - Generates code coverage
[env:fsw_native_ci]
extends = fsw_native_common
build_flags = ${fsw_native_common.build_flags} -g --coverage -D CI
extra_scripts = get_code_coverage.py
src_filter = +<fsw/FCCode/> -<fsw/FCCode/main.cpp> +<fsw/native_dummy.cpp> +<fsw/flow_data.cpp>

; This model of flight software is to be used in conjunction with psim.
[env:fsw_native]
extends = fsw_native_common
build_flags = ${fsw_native_common.build_flags} -O3
src_filter = +<fsw/FCCode/> -<fsw/FCCode/main.cpp> +<fsw/native.cpp> +<fsw/flow_data.cpp>

; This environment is used by the CI tool to run software unit tests on Teensy.
; It may also be used manually.
[fsw_teensy_ci_common]
extends = fsw_teensy_common
build_flags = ${fsw_teensy_common.build_flags} -D FUNCTIONAL_TEST -D PAN_LEADER
  -fno-strict-aliasing # Prevent bitstream unit testing errors
src_filter = ${fsw_teensy_common.src_filter} -<fsw/teensy.cpp> +<fsw/teensy_stub.cpp>
upload_protocol = teensy-cli
test_filter = test_fsw_*
test_ignore = []

[env:fsw_teensy35_ci]
extends = fsw_teensy_ci_common
board = teensy35

[env:fsw_teensy36_ci]
extends = fsw_teensy_ci_common
board = teensy36
